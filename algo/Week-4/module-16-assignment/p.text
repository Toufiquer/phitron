The Tetranacci sequence is an extension of the well-known Fibonacci sequence, incorporating four previous terms instead of two.

The Tetranacci sequence Tn is defined as follows:

T0 = 0, T1 = 1, T2 = 1,T3 = 2
For n>=4, Tn = Tn-1 + Tn-2 + Tn-3 + Tn-4
Given an integer 𝑛, return the value of Tn

Note : You must solve this problem using Recursion. (Top Down)

Input Format

A single integer n representing the position in the Tetranacci sequence.

Constraints
0 <= n <= 30

The result is guaranteed to fit within a 32-bit integer ( <= 2^31 - 1 )
Output Format

Print a single integer, the value of Tn

Sample Input 0

4
Sample Output 0

4
Explanation 0

image

Sample Input 1

5
Sample Output 1

8 


``` Solve it with C++ and remember must follow below code 
```
#include <bits/stdc++.h>
using namespace std;

int val[1005], weight[1005];
int dp[1005][1005];

int knapsack(int i, int mx_weight){
    if(i<0 || mx_weight <=0){
        return 0;
    }

    if(dp[i][mx_weight] != -1){
        return dp[i][mx_weight];
    }

    if(weight[i] <= mx_weight){
        int op1 = knapsack(i - 1, mx_weight - weight[i]) + val[i];
        int op2 = knapsack(i - 1, mx_weight);
        dp[i][mx_weight] = max(op1, op2);
        return dp[i][mx_weight];
    }
    else{
        dp[i][mx_weight] = knapsack(i - 1, mx_weight);
        return dp[i][mx_weight];
    }
}

int main(){
    int n, mx_weight;
    cin >> n;
    for (int i = 0; i < n;i++){
        cin >> val[i];
    }
    for (int i = 0; i < n;i++){
        cin >> weight[i];
    }
    cin >> mx_weight;

    for (int i = 0; i <= n;i++){
        for (int j = 0; j <= mx_weight;j++){
            dp[i][j] = -1;
        }
    }

    cout << knapsack(n - 1, mx_weight) << endl;

    return 0;
}```